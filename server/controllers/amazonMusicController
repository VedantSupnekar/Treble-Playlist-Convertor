const querystring = require('node:querystring')
const User = require("../models/userModel");
const axios = require('axios');
const client_id = "amzn1.application-oa2-client.824b11da046647ac8be19875867cf44f"
const redirect_uri = "http://localhost:4000/amazon/callback"
const client_secret = "amzn1.oa2-cs.v1.7976b653c53f15049d667524622c2a459dfe31d95684100641291c7667ae774d"

//Initiate OAuth flow - Spotify
//Input in the query - userId: ID of the user in mongoDB database
//userID used as the state 
module.exports.amazonAuth = async (req, res) => {
    const state = req.query.userId;
    const scope = 'profile';
  
    res.redirect('https://www.amazon.com/ap/oa' +
      querystring.stringify({
        response_type: 'code',
        client_id: client_id,
        scope: scope, 
        redirect_uri: redirect_uri,
        state: state
    }));
}

//Callback function getting response from spotify login API
//Response: code, state(userID) if accepted 
module.exports.amazonCallback = async (req, res) => {
    try {
      var code = req.query.code || null;
      var userId = req.query.state || null;

      res.redirect('http://localhost:3000/')
  
    //   // Exchange the authorization code for an access token and refresh token
    //   const tokenResponse = await axios.post('https://accounts.spotify.com/api/token', null, {
    //     params: {
    //       code: code, // Assuming you have this code from the authorization callback
    //       redirect_uri,
    //       grant_type: 'authorization_code',
    //     },
    //     headers: {
    //       'Authorization': `Basic ${Buffer.from(`${client_id}:${client_secret}`).toString('base64')}`,
    //     },
    //   });
  
    //   if (tokenResponse.status === 200) {
    //     const accessToken = tokenResponse.data.access_token;
    //     const refreshToken = tokenResponse.data.refresh_token;
    //     const tokenExpiresIn = Math.floor(Date.now() / 1000) + tokenResponse.data.expires_in; 
    //     const filter = {_id : userId}
    //     const update = {spotifyAccessToken : accessToken, spotifyRefreshToken : refreshToken, spotifyTokenExpiresIn : tokenExpiresIn, spotifyLoggedIn : true }
    //     //Store Access Token and Refresh Token of user in database
    //     await User.findOneAndUpdate(filter, update);
    //     res.redirect(`http://localhost:3000/`)
  
    //   } else {
    //     res.status(tokenResponse.status).json({ error: 'Invalid token' });
    //   }
    } catch (error) {
      console.error('Error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }